{
    "version": "https://jsonfeed.org/version/1",
    "title": "AaronWattsDev Blog",
    "description": "",
    "home_page_url": "https://blog.aaronwatts.dev",
    "feed_url": "https://blog.aaronwatts.dev/feed.json",
    "user_comment": "",
    "author": {
        "name": "aaronwatts@dev"
    },
    "items": [
        {
            "id": "https://blog.aaronwatts.dev/image-rendering-fixed/",
            "url": "https://blog.aaronwatts.dev/image-rendering-fixed/",
            "title": "Image Rendering Fixed",
            "summary": "<p>I was doing hacky workarounds when all I needed to do was go into the app settings and change the image resizing engine..</p>\n",
            "content_html": "<p>I was doing hacky workarounds when all I needed to do was go into the app settings and change the image resizing engine..</p>\n\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://blog.aaronwatts.dev/media/posts/9/thumbs-up-great-job-meme.jpg\" alt=\"Borat thumbs up great job meme\" width=\"500\" height=\"576\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.aaronwatts.dev/media/posts/9/responsive/thumbs-up-great-job-meme-xs.jpg 640w ,https://blog.aaronwatts.dev/media/posts/9/responsive/thumbs-up-great-job-meme-sm.jpg 768w ,https://blog.aaronwatts.dev/media/posts/9/responsive/thumbs-up-great-job-meme-md.jpg 1024w ,https://blog.aaronwatts.dev/media/posts/9/responsive/thumbs-up-great-job-meme-lg.jpg 1366w ,https://blog.aaronwatts.dev/media/posts/9/responsive/thumbs-up-great-job-meme-xl.jpg 1600w ,https://blog.aaronwatts.dev/media/posts/9/responsive/thumbs-up-great-job-meme-2xl.jpg 1920w\"></figure>\n<p>I had already worked out that Sharp (the nodeJS package) was playing havoc with the ARM architecture, but I didn't realise there was an option to switch the image resizing engine in the app settings! I prefer to start using a tool and learn it as I go. I also tend to hyper focus on what I'm doing, so it's easy to miss additional menu's in the top right corner when you've just come to know there's a menu down the left side of the window. Don't get me wrong, it's an intelligent UX choice to keep app breaking settings well away from the regularly used settings, it's a safeguard against inattentive users (stop pointing at me) from accidentally deleting all their work.</p>\n<p>So, I've switched the image engine to Jimp. Unfortunately, you lose the ability to convert to webp format. I like doing things the hard way, so I'm perfectly happy to go through old articles and strip images or purge some git history if it's needed at any point. I'm not expecting to have to even think about that for a while though.</p>\n<p>I also found one other very handy feature in the app settings, which is the default directory where Publii keeps the sites you make with it. This means I could keep the directory in my Nextcloud and work on my blog at my desk or on the go. I haven't had a proper look at how heavy the site directories are yet, and I try to keep my cloud light and more importantly, cheap. So we will see if I still want to do that in the near future.</p>",
            "author": {
                "name": "aaronwatts@dev"
            },
            "tags": [
                   "publii"
            ],
            "date_published": "2025-11-01T10:27:45+00:00",
            "date_modified": "2025-11-01T10:48:54+00:00"
        },
        {
            "id": "https://blog.aaronwatts.dev/still-restructuring/",
            "url": "https://blog.aaronwatts.dev/still-restructuring/",
            "title": "Still Restructuring",
            "summary": "<p>The accessibility website restructure has turned out to be a longer job than I had anticipated. Although it's given me a chance to practise my Vim controls - Vim has taken a lot of the work out of it, I'm glad I decided to switch to it again and learn it proper this time.</p>\n",
            "content_html": "<p>The accessibility website restructure has turned out to be a longer job than I had anticipated. Although it's given me a chance to practise my Vim controls - Vim has taken a lot of the work out of it, I'm glad I decided to switch to it again and learn it proper this time.</p>\n\n<p>I've been squeezing the odd hour of coding out whenever I can find time around work and life. I've restructured all my pages now, despite being slowed down by numerous distractions and investigations into what else I should be implementing in my website to improve accessibility. I've created a bit of a to do list, so I won't be pushing the updates until I've got through everything. I will be modifying the CMS module to match the new layouts, although this shouldn't require too much more work than just jigging the configs to match the new query selectors. I also want to populate OpenGraph and Schema data for articles from within the CMS, but again this should be a relatively simple job as it's just reusing values that already exist within the markup.</p>",
            "author": {
                "name": "aaronwatts@dev"
            },
            "tags": [
                   "aaronwatts.dev"
            ],
            "date_published": "2025-10-31T18:30:03+00:00",
            "date_modified": "2025-10-31T18:30:56+00:00"
        },
        {
            "id": "https://blog.aaronwatts.dev/semantic-restructuring/",
            "url": "https://blog.aaronwatts.dev/semantic-restructuring/",
            "title": "Semantic Restructuring",
            "summary": "<p>A while ago, a friend introduced me to <a href=\"https://simplecss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Simple CSS</a>, a CSS file (not framework), that focused on the use of semantic markup in styling a web page. After <em>\"pressure and feedback from the community\"</em>, the creator added classes to Simple CSS, two of them.</p>\n",
            "content_html": "<p>A while ago, a friend introduced me to <a href=\"https://simplecss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Simple CSS</a>, a CSS file (not framework), that focused on the use of semantic markup in styling a web page. After <em>\"pressure and feedback from the community\"</em>, the creator added classes to Simple CSS, two of them.</p>\n\n<p>The point I'm trying to make here, is that there is actually <em>a lot</em> of semantic HTML. Just take a look at the <a href=\"https://simplecss.org/demo\" target=\"_blank\" rel=\"noopener noreferrer\">Simple CSS demo</a> to see for yourself. The <code>details</code> element blew my mind a little, it is the perfect example of something that I would typically have just started coding some CSS styling rules and a JavaScript class toggle for - I honestly had no idea that HTML did that on it's own!</p>\n<p>With online web development courses, you're taught that semantic HTML is important. You are taught <code>h1</code> through to <code>h6</code>, as well as <code>div</code>, <code>article</code>, and <code>section</code>, and then you are taught the div-tastic Bootstrap CSS framework. Semantics is an honourable mention, where the concept is explained, but it's depth is not even hinted at.</p>\n<p>I can understand why this is; a web developer course aims to teach a learner the relevant technologies of the day, because that's what most people are using. It's what someone hiring will likely expect you to know. But semantic HTML does a lot on it's own, and paired with something like Simple CSS, it can make the job of building a web page quicker - I would even argue much quicker than Bootstrap could.</p>\n<p>And so, I tried to make <a href=\"https://aaronwatts.dev\" target=\"_blank\" rel=\"noopener noreferrer\">my main website</a> conform to semantic HTML, to avoid unnecessary JavaScript and to simplify and speed up styling, as well as making the overall website less complicated and lighter in kilobytes. Lately, I've been investigating semantics more, and their role in accessibility. I did try to make my website screen reader friendly, but after a bit of study I think I can do a better job of it, and so I've begun a restructure of the HTML across my website.</p>\n<p>I will be running through the post pages in Vim and reorganising the document structure to be, hopefully, better. The content won't change, visually it won't look any different. But I will feel good about having done a heap of work that very few people will ever be aware of .. priorities.</p>\n<p>Of course, my CMS will be temporarily broken, but I'm confident that I've built it in such a way that accommodating the site's structural changes shouldn't be hard, or time consuming, to implement within the Python program,</p>\n<p>In the interest of accessibility, I have also decided to do away with my splash page at <code>index.html</code>, and replace it with what is currently at <code>home.html</code>.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.aaronwatts.dev/media/posts/7/splash-screen.jpeg\" alt=\"\" width=\"1920\" height=\"968\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.aaronwatts.dev/media/posts/7/responsive/splash-screen-xs.jpeg 640w ,https://blog.aaronwatts.dev/media/posts/7/responsive/splash-screen-sm.jpeg 768w ,https://blog.aaronwatts.dev/media/posts/7/responsive/splash-screen-md.jpeg 1024w ,https://blog.aaronwatts.dev/media/posts/7/responsive/splash-screen-lg.jpeg 1366w ,https://blog.aaronwatts.dev/media/posts/7/responsive/splash-screen-xl.jpeg 1600w ,https://blog.aaronwatts.dev/media/posts/7/responsive/splash-screen-2xl.jpeg 1920w\"></figure>\n<p>It's a nice homage to an earlier year of the internet, when most websites had a front gate inviting users to <em>visit</em> or <em>enter</em>, but I do wonder if anyone who is not a millennial would even know what to do when presented with this screen!</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.aaronwatts.dev/media/posts/7/home-page.jpeg\" alt=\"\" width=\"1920\" height=\"968\" sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.aaronwatts.dev/media/posts/7/responsive/home-page-xs.jpeg 640w ,https://blog.aaronwatts.dev/media/posts/7/responsive/home-page-sm.jpeg 768w ,https://blog.aaronwatts.dev/media/posts/7/responsive/home-page-md.jpeg 1024w ,https://blog.aaronwatts.dev/media/posts/7/responsive/home-page-lg.jpeg 1366w ,https://blog.aaronwatts.dev/media/posts/7/responsive/home-page-xl.jpeg 1600w ,https://blog.aaronwatts.dev/media/posts/7/responsive/home-page-2xl.jpeg 1920w\"></figure>\n<p>Instead I've opted to incorporate the <code>h1</code> into the home page, which will now live at the main site index. I've given it a hero sized block-margin, and left aligned it because is supposed to be the terminal. I've also used the colours in the breadcrumb navigation used in the other pages. I had been using only system fonts previously, but I realised to keep the h1 on one line and with the page margins at all times, I had pick a font so that it remained consistent across browsers and operating systems. I chose JetBrainsMono, which brings with it font ligatures in my <code>pre</code> and <code>code</code> blocks. Oh, and one last change I made to it was the cursor animation is now slower, only flashes twice, and finishes as 'hidden' - this was all to make the header less obnoxious and distracting as it is now sharing screen space with other text and must learn to share the users attention.</p>",
            "author": {
                "name": "aaronwatts@dev"
            },
            "tags": [
                   "aaronwatts.dev"
            ],
            "date_published": "2025-10-26T07:21:38+00:00",
            "date_modified": "2025-10-27T07:44:36+00:00"
        },
        {
            "id": "https://blog.aaronwatts.dev/out-of-the-box/",
            "url": "https://blog.aaronwatts.dev/out-of-the-box/",
            "title": "Out Of The Box",
            "summary": "<p>After first build and deployment, with the default settings, you get a pretty rich static blog website out of the box. With sensible html structure that is not swamped by nested divs upon divs (already a winner here as far as I'm concerned!), a sensible folder structure, and all the necessities that a static site might require.</p>\n",
            "content_html": "<p>After first build and deployment, with the default settings, you get a pretty rich static blog website out of the box. With sensible html structure that is not swamped by nested divs upon divs (already a winner here as far as I'm concerned!), a sensible folder structure, and all the necessities that a static site might require.</p>\n\n<p>By default the build will include an RSS feed (or specifically Atom in this instance) as well as a JSON feed. These can both be disabled - but for a blog, why would you? There is also a sitemap.xml file that is styled in browser using a sitemap.xsl file. A robots.txt file is also included, as well as a 404 page. In my opinion the default theme is pretty good. Basic, and clean. Works well, looks nice. The folder directory, as well as giving each blog post it's own folder, also has folders for tags and authors, allowing hard coded collections for each respectively. I'm not really a blogger, so I don't know the accepted standards here, but I have to say, it's a smart way to add what might be considered <em>dynamic</em> features to a static site. CSS and JavaScript are all neatly tucked away in the assets folder, and images are organised into a media folder.</p>\n<p>I've been having trouble getting images to load through the software - this is due to a nodeJS library, in the Publii Electron build, called sharp that handles the images not playing well with ARM. I've experimented at rebuilding this and a few other dependencies for ARM architecture with limited success. Despite the issue, I've used the browser dev tools to see where the generated site was looking for it's images, and have been able to just put them in place manually using a terminal. Unlike in-post images, which are organised within the project directory, featured images are handled using the website's own SQLite database, and after using an SQLite browser application to investigate the schema, it was simple enough to set the filepath for featured images in the SQLite browser itself. In both situations, images will preview in the Publii software so it is quite obvious it has been set up correctly.</p>\n<p>That about covers the basics of a quick-setup build. There is far more to explore, even with the outdated version I am using. There will no doubt be even more in the current version running on X64 architecture.</p>",
            "author": {
                "name": "aaronwatts@dev"
            },
            "tags": [
                   "publii"
            ],
            "date_published": "2025-10-25T21:22:00+01:00",
            "date_modified": "2025-10-25T22:00:18+01:00"
        },
        {
            "id": "https://blog.aaronwatts.dev/my-website/",
            "url": "https://blog.aaronwatts.dev/my-website/",
            "title": "My Website",
            "summary": "<p>My website.. I mean, my <a href=\"https://aaronwatts.dev\" target=\"_blank\" rel=\"noopener noreferrer\"><em>other </em>website</a>. It's another blog space, but it's centred around themed topics. I didn't think I was interested in having a generic blog, but circumstances changed, and then I found <a href=\"https://getpublii.com/\">Publii</a>, and things just seemed to align.</p>\n",
            "content_html": "<p>My website.. I mean, my <a href=\"https://aaronwatts.dev\" target=\"_blank\" rel=\"noopener noreferrer\"><em>other </em>website</a>. It's another blog space, but it's centred around themed topics. I didn't think I was interested in having a generic blog, but circumstances changed, and then I found <a href=\"https://getpublii.com/\">Publii</a>, and things just seemed to align.</p>\n\n<p><strong>A Brief History:</strong> I started learning web development a while back, coding had always been a hobby, and I was exploring the possibility of a career change. I enjoyed it a lot. But through talking to friends and acquaintances already in the field, I decided that I might prefer it as a pasttime than in a professional capacity. I had already bought a domain with the intent of setting up a portfolio.</p>\n<p>After deciding I didn't need a portfolio, I scratched my head for a while about what to do with my domain name. Eventually, I decided I will log my hobby projects there, particularly those where the resources might prove helpful to others that might encounter some of the niche problems I have faced throughout. And so my website was born.</p>\n<p>After being inspired by this <a href=\"https://motherfuckingwebsite.com/\" target=\"_blank\" rel=\"noopener noreferrer\">motherfucking website</a>, I thought I might try a different approach than those tossed around by so many the online bootcamps that teach the importance of semantic HTML and then Bootstrap the <em>F</em> out of a stack of divs that ought to be drizzled in maple syrup and served with a side of bacon. That is, I decided to go simple, focusing more on content than pageantry or CSS and JavaScript wizardry. I'm not here to impress, I'm here to learn.</p>\n<p>And, I have to say, I may have learned more since I started this project than I ever did trying to make in image rotate off the side of the screen whilst I scrolled down the page. I've tried to focus my learning on all the things that happen in the background of the front end. What are these head tags for? How should a directory be structured? How does XML work and what is it for? That kind of thing. I'm not claiming to know more about any of that than anyone else, but I'm making a go of it, and most importantly: I feel like I'm learning.</p>\n<p>Keeping the document structure simple makes dealing with the content programmatically much simpler too, and as such I was able to write some (very messy) Python scripts to handle updates to the site. I just write the post document, the Python handles everything else. I have since forced myself to learn some of the basics of Python modules and imports, and reworked the scripts into a modular programme that makes it much easier to find and fix bugs, and also to make modifications to when I want to change something structurally within my website.</p>\n<p>The site has evolved from a curiosity into a bit of a passion project, as I'm always making changes and improvements to it. I'm forever finding questions to ask about the finer points of a what a website should be or include. And now with this blog I have somewhere I can postulate and record choices and changes made to the site.</p>\n<p>I have a few changes that I'm currently considering, as well as a few things I would like to research more about. If anything is esoteric enough or worthy of it's own guide, it will no doubt end up on the website itself, otherwise I will speak about any changes I make here.</p>",
            "author": {
                "name": "aaronwatts@dev"
            },
            "tags": [
                   "aaronwatts.dev"
            ],
            "date_published": "2025-10-20T11:51:45+01:00",
            "date_modified": "2025-10-20T12:44:40+01:00"
        },
        {
            "id": "https://blog.aaronwatts.dev/initial-set-up-and-deployment/",
            "url": "https://blog.aaronwatts.dev/initial-set-up-and-deployment/",
            "title": "Initial Set Up and Deployment",
            "summary": "<p>To get things started, I ran through a quick set up sticking with the defaults and deployed to Github Pages. The are a few options on how you deploy or package a website with Publii, and the ones provided set you up for all the common static site deployment methods that I'm familiar with.</p>\n",
            "content_html": "<p>To get things started, I ran through a quick set up sticking with the defaults and deployed to Github Pages. The are a few options on how you deploy or package a website with Publii, and the ones provided set you up for all the common static site deployment methods that I'm familiar with.</p>\n\n<p>For initial set up, I wrote an <a href=\"https://blog.aaronwatts.dev/hello-world/\">introductory blog entry</a>. On first go I had a look at the block editor, which I didn't like. I decided instead to go with the WYSIWYG (What You See Is What You Get), aka <em>\"Wizzywig\"</em>, editor. You can't change editor after setting it to a post, but you are also not limited to a single editor for all posts - you can pick any editor that may suit your current blog-entry-in-progress best. Nonetheless, this meant I had to delete the current post and start anew in order to change editor. This wasn't a grievous task at all, but it did cause my starting post to be dubbed <em>hello-world-2</em>. Not the most serious issue in the world, but when I know <em>hello-world-1</em>, or as it was formally known <em>hello-world</em> no longer exists in this plane of existence, there is no reason why it's successor need be known, regally, as <em>hello-world-2</em>. My first response to this was to change the <em>Post slug</em> in the SEO settings pane to the right of the editor, but each time the site re-cached, it was changed back to <em>hello-word-2 </em>... how bizarre. Well, while dearly-departed <em>hello-world</em> (the first) does not exist in this realm, they do still exist, within the limbo of the <em>trash</em> (or <em>recycle bin</em>, as we prefer to say here in His Highness's domain). Simply emptying the trash and once again renaming the <em>Post slug</em> solved this entirely. However, I did note that the resources for post in the final generated static site do organise their data using an SQLite database per generated website, meaning that the final version of <em>hello-world</em> collects it's resources, such as images, from a sub-folder named <em>2</em>, corresponding to the post ID within the site's SQLite database. This information will be useful later on when dealing with bugs (that may, or may not, arise from my refusal to set up an Intel machine to work with Intel software on).</p>\n<p>After making my first post I went through the deploy instructions for <em>Git</em>. <em>Github</em> and <em>Gitlab</em> both appear to be options labelled as <i>deprecated</i>, this makes sense since those both use git itself anyway. What I did find interesting, is that unless I'm mistaken, they were deprecated <em>after</em> this outdated Arm64 version of Publii I am using was released, so it appears that certain things in the software are being handled via an API perhaps? After setting up my repository in the settings I clicked on the <em>Test connection</em> button, at which point the app appeared to hang, but after waiting a few minutes I clicked on <em>Sync your website</em> anyway, and my website was in my Github repository. I went through the usual DNS set up with my provider, configured the Github Pages settings, and once everything was verified the website was displaying at my custom domain.</p>\n<p>After this, any new sync operations will remove the <em>CNAME</em> file that Github places in the repo to match it to the DNS configuration. To remedy this, I just had to click on <em>File Manager</em> in <em>Tools &amp; Plugins</em>, and add a CNAME file to the <em>root directory</em>. Unfortunately I couldn't edit the CNAME file from within the Publii app, but opening vim in <em>~/Documents/Publii/sites/my-blog/input/root-files</em> was an easy enough solution to that problem.</p>\n<p>All that I tweaked after this were a few things in the theme. I'm using the default <em>Simple</em> theme, which I quite like. I will take a look at other themes later on, but I feel like this one gives me everything I need. The theme handles the Blog intro on the home page, in which there's a <em>Read more</em> button there that doesn't really seem to do anything, so I just deleted it - if you are using an up to date version of Publii with the <em>Pages</em> feature you could maybe link that to an <em>About</em> page. This was not intuitive to find, until I realised that the theme, or template, dictates the structure of the pages, with that in mind it makes sense to look here when making adjustments to website outside of post content.</p>",
            "author": {
                "name": "aaronwatts@dev"
            },
            "tags": [
                   "publii"
            ],
            "date_published": "2025-10-19T11:53:54+01:00",
            "date_modified": "2025-10-19T21:40:18+01:00"
        },
        {
            "id": "https://blog.aaronwatts.dev/hello-world/",
            "url": "https://blog.aaronwatts.dev/hello-world/",
            "title": "Hello, World!",
            "summary": "<p>I have a blog! Well, technically I already have <a href=\"https://aaronwatts.dev/home\" target=\"_blank\" rel=\"noopener noreferrer\">several blogs</a>. But those have opinionated topic themes to them, and as such there is nowhere I can go to scream into the wind about the things I care about (what is this <em>social media</em> you speak of?). But there is also another reason for this new blogspace..</p>\n",
            "content_html": "<p>I have a blog! Well, technically I already have <a href=\"https://aaronwatts.dev/home\" target=\"_blank\" rel=\"noopener noreferrer\">several blogs</a>. But those have opinionated topic themes to them, and as such there is nowhere I can go to scream into the wind about the things I care about (what is this <em>social media</em> you speak of?). But there is also another reason for this new blogspace..</p>\n\n<p>After fine tuning a homebaked CMS (Content Management System) for my website in Python to perform exactly how it wanted it to, I thought I should take a look at existing static website CMS's to see if there is anything I hadn't considered (I know, wrong order of events, but I'm a clumsy hobbyist, and this is just how I <span style=\"text-decoration: line-through;\">work</span> play). In my search for static CMS's, I happened upon a software called <a href=\"https://getpublii.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Publii</a>, which piqued my curiosity.</p>\n<p>I consider myself a specialist in, or at the very least a staunch advocate of, what I call Low-To-No-Cost solutions. In building my <a href=\"https://aaronwatts.dev\">main website</a> I took note of how much graft it took to get my website to require the minimum amount of work, and how very specific it's use case became as a result of that process. As a thought experiment I pondered of how an equally cheap solution could be offered to those less tech literate than myself. And it looks as though Publii could be the answer to that question.</p>\n<p>I will be using Publii for a little while, to learn a bit more about it before I begin suggesting it to others as a solution. And maybe I'll keep using it thereafter if I grow fond of it? It's looking like there may be a few hurdles for me to surpass, the first of which is that I do all my computing on a Raspberry Pi, and there isn't currently a version in release for Arm64 Linux. This was solved by using an <a href=\"https://github.com/casimiroarruda/Publii-arm64-releases/releases\" target=\"_blank\" rel=\"noopener noreferrer\">Arm64 community build by casimiroarruda</a>, which unfortunately is a few versions behind and doesn't include the <em>pages</em> feature that allows user's to expand their blog sites into static websites proper. But for this use case, that's not really a feature I need, and I have a friend exploring the software on his Macbook too as a potential exit for him out of the Wix ecosystem. Nonetheless, and despite it not necessarily being my forte, I had a stab at compiling the Electron app from source in node, and packaging into deb, rpm and appimage formats on my own machine - but it soon became evident to why the Arm64 build is not on the current version, as it just doesn't work on Arm.</p>\n<p>So, here begins my new blogging adventure..</p>",
            "author": {
                "name": "aaronwatts@dev"
            },
            "tags": [
                   "publii"
            ],
            "date_published": "2025-10-18T11:23:52+01:00",
            "date_modified": "2025-10-19T21:40:27+01:00"
        }
    ]
}
